
<bool_expr> := <bool_term> (<low_order_bool_op> <bool_term>)*

<bool_term> := <bool_factor> (<equals> <bool_factor>)*

<bool_factor> := <bool> | <not> <bool_expr> | <comperison_expr>

<comperison_expr> =: <math_expr> (<comperison_op> <math_expr>)*

<math_expr> := <math_term> (<low_order_math_op> <math_term>)*

<math_term> := <math_factor> (<high_order_math_op> <math_factor>)* 

<math_factor> := <low_order_op> <math_expr> | <atom>

<atom> :=  <int> |  ( <bool_expr> ) | <while_expr>

<while_expr> := while (<bool_expr>) { <bool_expr> }


(true == true)
(3+2)/5

<int> :=  <non_zero_dig> <int> | <non_zero_dig> | 0
<non_zero_dig> := 1..9
<high_order_math_op> := * | / | // | %
<low_order_math_op> := + | -
<keywords> := while
<bool> := true | false
<not> := !
<low_order_bool_op> := && | ||
<comperison_op> : < | <= | > | >= | <equals>
<euqels> := == | != 