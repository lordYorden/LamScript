
<statements> := NEWLINE* <statement> (NEWLINE+ <statement>)* NEWLINE*

<statement> := <bool_expr> | <return> | <continue> | <break>

<bool_expr> := <bool_term> (<low_order_bool_op> <bool_term>)*

<bool_term> := <bool_factor> (<equals> <bool_factor>)*

<bool_factor> := <bool> | <not> <bool_expr> | <comparison_expr>

<comparison_expr> =: <math_expr> (<comperison_op> <math_expr>)*

<math_expr> := <math_term> (<low_order_math_op> <math_term>)*

<math_term> := <math_factor> (<high_order_math_op> <math_factor>)* 

<math_factor> := <low_order_op> <math_expr> | <call>

<call> := <atom> ( <arguments>? )?

<atom> :=  <int> | <identifier> |  ( <bool_expr> ) 
            | <while_expr> | <func_def> 

<while_expr> := while (<bool_expr>) { <bool_expr> }
              | while (<bool_expr>) { NEWLINE <statements> }

<return> := return <bool_expr>? NEWLINE
<continue> := continue
<break> := break

<func_def> := def <identifier> ( <params>? ) { <bool_expr> }
            | def <identifier> ( <params>? ) { NEWLINE <statements> }
            | lite ( <params>? ) <bool_expr>

<params> := <identifier> (, <identifier>)*
<argument> := <expr> (, <expr>)*

<int> :=  <non_zero_dig> <int> | <non_zero_dig> | 0
<non_zero_dig> := 1..9
<high_order_math_op> := * | / | // | %
<low_order_math_op> := + | -

<keywords> := while | lite

<bool> := true | false
<not> := !
<low_order_bool_op> := && | ||
<comperison_op> : < | <= | > | >= | <equals>
<euqels> := == | != 